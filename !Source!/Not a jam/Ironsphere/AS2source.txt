// Action script...

// [onClipEvent of sprite 27 in frame 1]
onClipEvent (load)
{
}

// [onClipEvent of sprite 27 in frame 1]
onClipEvent (data)
{
    if (_root.tick == 1 && _root.OD >= _root.ODH)
    {
        for (id = 1; id <= _root.cn; id++)
        {
            _root.distance(_root.move_flag._x, _root["hex_" + id]._x, _root.move_flag._y, _root["hex_" + id]._y);
            if (_root.dist <= _root.cw + _root.greh && _root.dist >= _root.cw - _root.greh && _root.ifblock[id] == "empty")
            {
                _root["hex_" + id].gotoAndStop(2);
                continue;
            } // end if
            _root["hex_" + id].gotoAndStop(1);
        } // end of for
        _root.tick = 0;
    } // end if
}

// [onClipEvent of sprite 27 in frame 1]
onClipEvent (data)
{
    for (i = 0; i < _root.cn; i++)
    {
        if (id_hex > _root.cn - 1)
        {
            id_hex = 1;
        }
        else
        {
            id_hex = id_hex + 1;
        } // end else if
        if (_root.cell[60] != 61)
        {
            _root.cell[id_hex - 1] = id_hex;
        } // end if
    } // end of for
    if (_root.move_flag.hitTest(_root["hex_" + id_hex]))
    {
        if (_root.move_flag._x == _root["hex_" + id_hex]._x && _root.move_flag._y == _root["hex_" + id_hex]._y)
        {
            _root["hex_" + id_hex].gotoAndStop(4);
        }
        else if (_root.OD >= _root.ODH)
        {
        } // end else if
        _root.bhex_1._y = _root.move_flag._y - 90;
        _root.bhex_2._x = _root.move_flag._x + 50;
        _root.bhex_2._y = _root.move_flag._y - 90;
        _root.bhex_3._x = _root.move_flag._x + 100;
        _root.bhex_3._y = _root.move_flag._y;
        _root.bhex_4._x = _root.move_flag._x + 50;
        _root.bhex_4._y = _root.move_flag._y + 90;
        _root.bhex_5._x = _root.move_flag._x - 50;
        _root.bhex_5._y = _root.move_flag._y + 90;
        _root.bhex_6._x = _root.move_flag._x - 100;
        _root.bhex_6._y = _root.move_flag._y;
        if (_root.big_hit.hitTest(_root.bhex_1) || _root.big_hit2.hitTest(_root.bhex_1) || _root.big_hit3.hitTest(_root.bhex_1))
        {
            _root.bhex_1_b = 1;
            _root.bhex_1.gotoAndStop(2);
        }
        else
        {
            _root.bhex_1_b = 0;
            _root.bhex_1.gotoAndStop(1);
            _root.bhex_1._x = _root.gigant;
        } // end else if
        if (_root.big_hit.hitTest(_root.bhex_2) || _root.big_hit2.hitTest(_root.bhex_2) || _root.big_hit3.hitTest(_root.bhex_2))
        {
            _root.bhex_2_b = 1;
            _root.bhex_2.gotoAndStop(2);
        }
        else
        {
            _root.bhex_2_b = 0;
            _root.bhex_2.gotoAndStop(1);
            _root.bhex_2._x = _root.gigant;
        } // end else if
        if (_root.big_hit.hitTest(_root.bhex_3) || _root.big_hit2.hitTest(_root.bhex_3) || _root.big_hit3.hitTest(_root.bhex_3))
        {
            _root.bhex_3_b = 1;
            _root.bhex_3.gotoAndStop(2);
        }
        else
        {
            _root.bhex_3_b = 0;
            _root.bhex_3.gotoAndStop(1);
            _root.bhex_3._x = _root.gigant;
        } // end else if
        if (_root.big_hit.hitTest(_root.bhex_4) || _root.big_hit2.hitTest(_root.bhex_4) || _root.big_hit3.hitTest(_root.bhex_4))
        {
            _root.bhex_4_b = 1;
            _root.bhex_4.gotoAndStop(2);
        }
        else
        {
            _root.bhex_4_b = 0;
            _root.bhex_4.gotoAndStop(1);
            _root.bhex_4._x = _root.gigant;
        } // end else if
        if (_root.big_hit.hitTest(_root.bhex_5) || _root.big_hit2.hitTest(_root.bhex_5) || _root.big_hit3.hitTest(_root.bhex_5))
        {
            _root.bhex_5_b = 1;
            _root.bhex_5.gotoAndStop(2);
        }
        else
        {
            _root.bhex_5_b = 0;
            _root.bhex_5.gotoAndStop(1);
            _root.bhex_5._x = _root.gigant;
        } // end else if
        if (_root.big_hit.hitTest(_root.bhex_6) || _root.big_hit2.hitTest(_root.bhex_6) || _root.big_hit3.hitTest(_root.bhex_6))
        {
            _root.bhex_6_b = 1;
            _root.bhex_6.gotoAndStop(2);
        }
        else
        {
            _root.bhex_6_b = 0;
            _root.bhex_6.gotoAndStop(1);
            _root.bhex_6._x = _root.gigant;
        } // end else if
        _root.big_hit.swapDepths(100);
        _root.bhex_1.swapDepths(100);
        _root.bhex_2.swapDepths(100);
        _root.bhex_3.swapDepths(100);
        _root.bhex_4.swapDepths(100);
        _root.bhex_5.swapDepths(100);
        _root.bhex_6.swapDepths(100);
        _root.nhex_1.swapDepths(100);
        trace ("цикл проверки закончен");
    } // end if
}

// [Action in Frame 1]
function distance(x1, x2, y1, y2)
{
    rx = Math.pow(x1 - x2, 2);
    ry = Math.pow((y1 - y2) * 2, 2);
    dist = Math.sqrt(rx + ry);
    dist = Math.round(dist);
    return (dist);
} // End of the function
function distance2(x1, x2, y1, y2)
{
    rx2 = Math.pow(x1 - x2, 2);
    ry2 = Math.pow((y1 - y2) * 2, 2);
    dist2 = Math.sqrt(rx2 + ry2);
    dist2 = Math.round(dist2);
    return (dist2);
} // End of the function
function m_distance(x1, x2, y1, y2)
{
    m_rx = Math.pow(x1 - x2, 2);
    m_ry = Math.pow((y1 - y2) * 2, 2);
    m_dist = Math.sqrt(m_rx + m_ry);
    m_dist = Math.round(m_dist);
    return (m_dist);
} // End of the function
function random_hex()
{
    do
    {
        random_hex_var = Math.round(Math.random() * 1000);
    } while (random_hex_var > cn)
    return (random_hex_var);
} // End of the function
function random_block_number()
{
    do
    {
        random_block_var = Math.round(Math.random() * 1000);
    } while (random_block_var <= min_blocks || random_block_var >= max_blocks)
    return (random_block_var);
} // End of the function
function algoritm()
{
    if (OD >= ODH && tick == 1)
    {
        for (id = 1; id <= cn; id++)
        {
            alg[id] = 0;
        } // end of for
        for (id = 1; id <= cn; id++)
        {
            distance(_root.move_flag._x, _root["hex_" + id]._x, _root.move_flag._y, _root["hex_" + id]._y);
            if (dist <= cw + greh && dist >= cw - greh && alg[id] == 0)
            {
                if (ifblock[id] == "empty")
                {
                    alg[id] = 1;
                    _root["hex_" + id].gotoAndStop(2);
                } // end if
                continue;
            } // end if
            _root["hex_" + id].gotoAndStop(1);
        } // end of for
        for (i = 1; i <= Math.floor(OD / ODH) - 1; i++)
        {
            for (id = 1; id <= cn; id++)
            {
                if (alg[id] == i)
                {
                    _root.move_flag._x = _root["hex_" + id]._x;
                    _root.move_flag._y = _root["hex_" + id]._y;
                    for (id2 = 0; id2 < 8; id2++)
                    {
                        hex_id_alg = id + n_hex_id[id2];
                        distance(_root.move_flag._x, _root["hex_" + hex_id_alg]._x, _root.move_flag._y, _root["hex_" + hex_id_alg]._y);
                        if (dist <= cw + greh && dist >= cw - greh && alg[hex_id_alg] == 0)
                        {
                            if (ifblock[hex_id_alg] == "empty")
                            {
                                alg[hex_id_alg] = i + 1;
                                _root["hex_" + hex_id_alg].gotoAndStop(2);
                            } // end if
                            continue;
                        } // end if
                        if (alg[hex_id_alg] == 0)
                        {
                            _root["hex_" + hex_id_alg].gotoAndStop(1);
                        } // end if
                    } // end of for
                    _root.move_flag._x = _root.player._x;
                    _root.move_flag._y = _root.player._y;
                } // end if
            } // end of for
        } // end of for
    }
    else
    {
        for (id = 1; id <= cn; id++)
        {
            _root["hex_" + id].gotoAndStop(1);
        } // end of for
    } // end else if
    tick = 0;
} // End of the function
function algoritm_mouse()
{
    if (OD >= ODH)
    {
        for (i = 0; i < 10; i++)
        {
            _root["hex_" + id_plan[i]].gotoAndStop(2);
            trace ("idplan[i] - " + id_plan[i]);
        } // end of for
        id_plan[alg[thi]] = thi;
        for (id = 0; id < alg[thi]; id++)
        {
            best_hex_id = thi;
            for (i = 0; i < 8; i++)
            {
                trace ("thi - " + thi);
                trace ("idplanthi - " + id_plan[alg[thi]]);
                id_h = id_plan[alg[thi] - id] + n_hex_id[i];
                trace ("idplanthi-id - " + id_plan[alg[thi] - id]);
                trace ("вероятный - " + id_h);
                trace ("n hex id - " + n_hex_id[i]);
                distance2(_root["hex_" + id_plan[alg[thi] - id]]._x, _root["hex_" + id_h]._x, _root["hex_" + id_plan[alg[thi] - id]]._y, _root["hex_" + id_h]._y);
                trace ("dist - " + dist2);
                if (alg[id_h] == alg[thi] - id - 1 && ifblock[id_h] == "empty" && dist2 <= cw + greh && dist2 >= cw - greh)
                {
                    best_hex_id = id_h;
                } // end if
            } // end of for
            trace ("учавствует в пути блок" + best_hex_id);
            id_plan[alg[thi] - id - 1] = best_hex_id;
            _root["hex_" + best_hex_id].gotoAndStop(3);
            trace ("idplan - " + id_plan);
        } // end of for
    } // end if
} // End of the function
onMouseMove = function ()
{
    Mouse.hide();
    cur._x = _xmouse;
    cur._y = _ymouse;
    mouse_hex = 100;
    for (id = 1; id <= cn; id++)
    {
        m_distance(_root._xmouse, _root["hex_" + id]._x, _root._ymouse, _root["hex_" + id]._y);
        if (m_dist < mouse_hex)
        {
            mouse_hex = m_dist;
            best_hex = id;
        } // end if
    } // end of for
    if (alg[best_hex] != 0)
    {
        thi = best_hex;
        _root.m_hex._x = _root["hex_" + best_hex]._x;
        _root.m_hex._y = _root["hex_" + best_hex]._y;
    } // end if
    updateAfterEvent();
};
_root.cur.swapDepths(1000000);
_root.m_hex.swapDepths(1040001);
var roote = "noo";
var gigant = 10000;
var tick = 1;
var id_hex = 0;
var id_block = 0;
var id_enemy = 0;
var id_hex_var = 0;
var block_depths = 0;
var mouse_hex = 0;
var best_hex = 0;
var thi = 0;
var id_h = 0;
var best_hex_id = 0;
var n_thi = 0;
var hex_id_alg = 0;
var gw = 16;
var gh = 16;
var cn = gw * gh;
var startx = 100;
var starty = 100;
var cw = 100;
var ch = 43.301270;
var greh = 10;
var min_blocks = 15;
var max_blocks = 30;
var enemy_number = 9;
var max_start_x_player = 500;
var min_start_x_enemy = 1000;
var dist;
var rx;
var ry;
var dist2;
var rx2;
var ry2;
var m_dist;
var m_rx;
var m_ry;
var random_hex_var;
var random_hex_var2;
var random_block_var;
var ifblock = [0];
var alg = [0];
var id_plan = [0];
var n_hex_id = [-gw - 1, -gw, -gw + 1, -1, 1, gw - 1, gw, gw + 1];
var slot = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
var cell = [1];
var d1 = [];
var d2 = [];
var d3 = [];
var d4 = [];
var d5 = [];
var d6 = [];
var d7 = [];
var d8 = [];
var d9 = [];
var d10 = [];
var OD = 20;
var ODH = 6;
trace ("Vars loading...100%");
trace ("Func loading...100%");
var rnum = 0;
var xnum = 0;
for (i = 0; i < _root.gh / 2; i++)
{
    for (a = 0; a < _root.gw; a++)
    {
        _root.id_hex = _root.id_hex + 1;
        _root.attachMovie("hex", "hex_" + _root.id_hex, _root.id_hex);
        _root["hex_" + id_hex]._x = _root.startx + xnum * _root.cw;
        _root["hex_" + id_hex]._y = _root.starty + rnum * _root.ch;
        _root.ifblock[id_hex] = "empty";
        xnum = xnum + 1;
    } // end of for
    rnum = rnum + 1;
    xnum = 0;
    for (b = 0; b < _root.gw; b++)
    {
        _root.id_hex = _root.id_hex + 1;
        _root.attachMovie("hex", "hex_" + _root.id_hex, _root.id_hex);
        _root["hex_" + id_hex]._x = _root.startx + xnum * _root.cw + _root.cw * 0.500000;
        _root["hex_" + id_hex]._y = _root.starty + rnum * _root.ch;
        _root.ifblock[id_hex] = "empty";
        xnum = xnum + 1;
    } // end of for
    rnum = rnum + 1;
    xnum = 0;
} // end of for
trace ("Grid loading...100%");
do
{
    random_hex_var2 = random_hex();
} while (_root["hex_" + random_hex_var2]._x > max_start_x_player)
_root.attachMovie("player", "player", random_hex_var2 * 1000 + 1);
_root.player._x = _root["hex_" + random_hex_var2]._x;
_root.player._y = _root["hex_" + random_hex_var2]._y;
_root.ifblock[random_hex_var2] = "player";
_root.move_flag._x = _root.player._x;
_root.move_flag._y = _root.player._y;
_root.move_flag.swapDepths(-100);
for (i = 0; i < enemy_number; i++)
{
    do
    {
        do
        {
            random_hex_var2 = random_hex();
        } while (_root["hex_" + random_hex_var2]._x < min_start_x_enemy)
    } while (_root.ifblock[random_hex_var2] != "empty")
    _root.id_enemy = _root.id_enemy + 1;
    _root.attachMovie("enemy", "enemy_" + _root.id_enemy, random_hex_var2 * 1000 + 2);
    _root["enemy_" + _root.id_enemy]._x = _root["hex_" + random_hex_var2]._x;
    _root["enemy_" + _root.id_enemy]._y = _root["hex_" + random_hex_var2]._y;
    _root.ifblock[random_hex_var2] = "enemy";
} // end of for
for (i = 0; i <= random_block_number(); i++)
{
    do
    {
        random_hex_var2 = random_hex();
    } while (_root.ifblock[random_hex_var2] != "empty")
    id_block = id_block + 1;
    _root.attachMovie("block", "block_" + _root.id_block, id_block * 1000 + 3);
    _root["block_" + _root.id_block]._x = _root["hex_" + random_hex_var2]._x;
    _root["block_" + _root.id_block]._y = _root["hex_" + random_hex_var2]._y;
    _root.block_depths = random_hex_var2 * 1000;
    _root["block_" + _root.id_block].swapDepths(block_depths);
    _root.ifblock[random_hex_var2] = "block";
} // end of for
trace ("Sprite loading...100%");
onEnterFrame = function ()
{
    if (thi != n_thi)
    {
        n_thi = thi;
        algoritm_mouse();
    } // end if
    if (OD >= ODH && tick == 1)
    {
        algoritm();
        for (i = 1; i <= 256; i++)
        {
            createTextField("h1_log" + i, i + 300000, _root["hex_" + i]._x - 25, _root["hex_" + i]._y, 25, 20);
            _root["h1_log" + i].textColor = 16777215;
            _root["h1_log" + i].text = i;
        } // end of for
        for (i = 1; i <= 256; i++)
        {
            createTextField("h2_log" + i, i + 301000, _root["hex_" + i]._x, _root["hex_" + i]._y, 25, 20);
            _root["h2_log" + i].textColor = 16777215;
            _root["h2_log" + i].text = alg[i] * 6 / 6;
        } // end of for
        for (i = 1; i <= 256; i++)
        {
            createTextField("h3_log" + i, i + 302000, _root["hex_" + i]._x - 10, _root["hex_" + i]._y - 20, 25, 20);
            _root["h3_log" + i].textColor = 16777215;
            _root["h3_log" + i].text = ifblock[i];
        } // end of for
    } // end if
};
trace ("Algoritm 1 part ok");
trace ("Algoritm 2 part ok");
_root.m_hex.onRelease = function ()
{
    if (OD >= ODH)
    {
        OD = OD - alg[thi] * ODH;
        _root.move_flag._x = _root["hex_" + id_plan[alg[thi]]]._x;
        _root.move_flag._y = _root["hex_" + id_plan[alg[thi]]]._y;
        _root.hex_flag._x = _root["hex_" + id_plan[alg[thi]]]._x;
        _root.hex_flag._y = _root["hex_" + id_plan[alg[thi]]]._y;
        tick = 1;
    } // end if
};
